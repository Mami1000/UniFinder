import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, FormArray } from '@angular/forms';
import { Router } from '@angular/router';
import { UniversityService, University } from '../../../services/university/university.service';
import { MediaService } from '../../../services/media/media.service';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MediaService
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

@Component({
  selector: 'app-university-create',
  templateUrl: './create-university.component.html',
  styleUrls: ['./create-university.component.css'],
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule]
})
export class UniversityCreateComponent {
  universityForm: FormGroup;
  selectedLogoFile: File | null = null;
  logoPreviewUrl: string | null = null;
  logoFileName: string | null = null;  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  logoUploading: boolean = false;

  constructor(
    private fb: FormBuilder,
    private universityService: UniversityService,
    private mediaService: MediaService,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    private router: Router
  ) {
    this.universityForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      description: [''],
      logoUrl: [''],  // –°—é–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      courses: this.fb.array([]),
    });
  }

  get courses(): FormArray {
    return this.universityForm.get('courses') as FormArray;
  }

  addCourse(course: string): void {
    if (course) {
      this.courses.push(this.fb.control(course, Validators.required));
    }
  }

  removeCourse(index: number): void {
    this.courses.removeAt(index);
  }

  onLogoFileChange(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) {
      return;
    }
  
    const file = input.files[0];
    if (!file.type.startsWith('image/') && file.type !== 'image/svg+xml') {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, SVG –∏ —Ç.–¥.).");
      return;
    }
  
    this.selectedLogoFile = file;
  
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Data URL –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    const reader = new FileReader();
    reader.onload = () => {
      this.logoPreviewUrl = reader.result as string;
    };
    reader.readAsDataURL(file);
  
    // üëâ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É
    this.uploadLogo();
  }
  

  uploadLogo(): void {
    if (this.selectedLogoFile) {
      this.logoUploading = true;
      this.mediaService.uploadUniversityLogo(this.selectedLogoFile).subscribe({
        next: (response) => {
          this.logoFileName = response.fileName;
          this.logoUploading = false;
        },
        error: (err) => {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', err);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞');
          this.logoUploading = false;
        },
      });
    }
  }
  
  

  onSubmit(): void {
    if (this.universityForm.valid && this.logoFileName && !this.logoUploading) {
      const universityData: University = {
        name: this.universityForm.value.name,
        location: this.universityForm.value.location,
        description: this.universityForm.value.description,
        courses: this.universityForm.value.courses,
        logoUrl: this.logoFileName,
      };
  
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', universityData);
  
      this.universityService.createUniversityWithLogo(universityData).subscribe({
        next: (createdUniversity) => {
          console.log('–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç —Å–æ–∑–¥–∞–Ω:', createdUniversity);
          this.router.navigate(['/universities']);
        },
        error: (err) => console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:', err),
      });
    } else {
      console.warn('–§–æ—Ä–º–∞ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞, –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.');
    }
  }
  
}
